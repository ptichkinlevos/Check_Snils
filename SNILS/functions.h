#ifndef FUNCTIONS_H
#define FUNCTIONS_H

#include <iostream>
#include <QtSql>

using namespace std;

QSqlDatabase connect_database() //Функция соединения с БД
{
    //db - переменная с типом данных QSqlDatabase, QPSQL - плагин, указывающий на соединение с БД PostgreSQL, Connect_1 - имя соединения
    QSqlDatabase db = QSqlDatabase::addDatabase("QPSQL","Connect_1");
    db.setHostName("localhost"); //Имя хоста
    db.setDatabaseName("Info_about_SNILS"); //Имя БД
    db.setPort(5432); //Порт хоста (стандартный)
    db.setUserName("postgres"); //Имя админа БД
    db.setPassword("123"); //Пароль админа
    return db; //Возвраст переменной соединения
}

void out(int x) //Функция вывода результата работы программы, где x - номер выводимого сообщения
{
    if(x==1) //Если СНИЛС введён неверно
    {
        cout<<"СНИЛС введён некорректно\n"<<endl;
    }
    if(x==2) //Если КС подсчитана неправильно
    {
        cout<<"КС введена неверно"<<endl;
    }
    if(x==3) //Если СНИЛС полностью корректен
    {
        cout<<"СНИЛС введён полностью корректно\n"<<endl;
    }
}

void decoration(char *x, int S) //Функция вывода на экран расчёта КС программой
{
    cout<<"Пересчёт КС: ";
    for(int i=0,p=9;i<14;i++) //Цикл для вывода суммы первых 9 цифр СНИЛСА, где p - номер позиции цифры (исходная позиция = 9)
    {
        if(x[i]!='-'&&i<11) //Если элемент массива не дефис и его номер меньше 11
        {
            if(i==10) //Если все 8 цифр пройдены, то после умножения 9-ой цифры ставим знак =
            {
                cout<<x[i]<<"*"<<p<<" = ";
            }
            else //Если цифра не имеет номер 10, то умножаем текущую цифру на позицию и складываем со следующим произведением
            {
                cout<<x[i]<<"*"<<p<<" + ";
            }
            p--;
        }
    }
    cout<<S<<endl; //После пересчёта КС, узнаём чему равна сумма произведений
    if(S<100) //Если сумма < 100, то подсчитанная сумма является самой КС
    {
        cout<<S<<" < 100 => S = "<<S<<endl;
    }
    if(S==100||S==101) //Если сумма = 100 или сумма = 101, то КС = 00
    {
        if(S==100)
        {
           cout<<S<<" = 100 => S = 00"<<endl;
        }
        if(S==101)
        {
           cout<<S<<" = 101 => S = 00"<<endl;
        }
    }
    if(S>101) //Если сумма > 101, то КС = сумма % 101
    {
        cout<<S<<" > 101 => S = "<<S<<" % 101"<<" = "<<S%101<<endl;
    }
}

bool check_ss(char *x,char *y) //Функция проверки подсчитанной контрольной суммы, где x - массив, содержащий СНИЛС, S - подсчитанная КС
{
    if(x[12]==y[0]&&x[13]==y[1])
    {
        return true;
    }
    else
    {
        return false; //В случае не соответствия подсчитанной КС исходной
    }
}

char *count_ss(char *x) //Функция подсчёта КС, где x - массив, содержащий СНИЛС
{
    char ss[2]; //Массив, содержащий подсчитанную сумму первых 9 цифр
    char *point_ss=ss; //Указатель на массив ss
    int S=0; //Объявим сумму S равную нулю
    for(int i=0,p=9;i<14;i++) //Цикл для подсчёта суммы первых 9 цифр СНИЛСА, где p - номер позиции цифры (исходная позиция = 9)
    {
        if(x[i]!='-'&&i<11) //Если элемент массива не дефис и его номер меньше 11
        {
            S=S+((x[i]-'0')*p); //Умножение цифры на позицию, где x[i]-'0' - преобразования символа в цифру
            p--;
        }
    }
    decoration(x,S); //Функция вывода на экран расчёта КС
    if(S==100||S==101) //При КС 100 или 101 КС = 00
    {
        ss[0]='0';
        ss[1]='0';
    }
    if(S<100) //При КС < 100 проверяем соответствие подсчитанной КС исходной
    {
        ss[0]=S/10+'0'; //Берём целую часть от подсчитанной КС
        ss[1]=S%10+'0'; //Берём остаток от деления на 10 от подсчитанной КС
    }
    if(S>101) //При КС > 101 делим подсчитанную КС на 101 и берём её остаток
    {
        S=S%101; //S = остатку от деления S на 101
        ss[0]=S/10+'0';
        ss[1]=S%10+'0';
    }
    return point_ss; //Возвращаем указатель на массив ss
}

bool check_in(char *x,int k) //Функция проверки ввода СНИЛСА на соответствие требованиям см. док. "Определение формата в нотации BNF"
{
    //Если элемент равен цифре то идём далее
    if(x[k]=='0'||x[k]=='1'||
       x[k]=='2'||x[k]=='3'||
       x[k]=='4'||x[k]=='5'||
       x[k]=='6'||x[k]=='7'||
       x[k]=='8'||x[k]=='9')
    {
        if(k!=3&&k!=7&&k!=11)
        {
            k++;
            return check_in(x,k); //Возврат обратно в функцию для продолжения проверки
        }
        else
        {
            return false;
        }
    }
    /*Если элемент не цифра и его номер + 1 делится на 4 без остатка,
    а также его номер не равен 11, и сам элемент является символом '-' , то идём далее*/
    if(((k+1)%4==0&&k!=11)&&x[k]=='-')
    {
        k++;
        return check_in(x,k);
    }
    if(k==11&&x[k]==' ') //Если номер элемента 11 и он является пробелом, то идём далее
    {
        k++;
        return check_in(x,k);
    }
    if(k==14&&x[k]=='\0') //Если достигнута позиция завершающего нуля, то введённый СНИЛС корректен
    {
        return true;
    }
    return false;
}

void autocheck_snils(QString record) //Функция автоматической проверки СНИЛСА из готового набора в БД, где record - один из СНИЛСов в БД
{
    char snils[15]; //Создаём массив, хранящий в себе СНИЛС
    strncpy(snils, record.toLocal8Bit().constData(),14); //Копируем в массив snils 14 символов, преобразуя record в string
    cout<<"СНИЛС: "<<snils<<endl; //Выводим СНИЛС, который взят из БД
    int k=0; //Номер элемента в массиве
    if(check_in(snils,k)==true) //Если проверка ввода завершилась без ошибок, то идём далее
    {
        if(check_ss(snils,count_ss(snils))==true) //Подсчитываем КС и после сравниваем её с исходной
        {
            out(3); //СНИЛС введён полностью корректно
        }
        else
        {
            out(2); //Введённая КС СНИЛСА подсчитана неверно
            out(1);
        }
    }
    else
    {
        out(1); //СНИЛС введён некорректно
    }
}

void manualcheck_snils() //Функция ручной проверки СНИЛСА, вводимого с клавиатуры
{
    char snils[15]; //Создаём массив, хранящий в себе СНИЛС
    int k=0; //Номер элемента в массиве
    cout<<"Введите СНИЛС: ";
    cin.getline(snils,15); //Ввод СНИЛСА, не игнорирующий пробелы
    if(!cin.fail()) //Если в массиве введено 14 символов и нет ошибок при чтении потока
    {
        if(check_in(snils,k)==true) //Если проверка ввода завершилась без ошибок, то идём далее
        {
            if(check_ss(snils,count_ss(snils))==true) //Подсчитываем КС и после сравниваем её с исходной
            {
                out(3); //СНИЛС введён полностью корректно
            }
            else
            {
                out(2); //Введённая КС СНИЛСА подсчитана неверно
                out(1);
            }
        }
        else
        {
            out(1); //СНИЛС введён некорректно
        }
    }
    else
    {
        out(1);
    }
}

#endif // FUNCTIONS_H
